{"/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/test.js":"/* istanbul instrument in package npmtest_grunt_run_grunt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/lib.npmtest_grunt_run_grunt.js":"/* istanbul instrument in package npmtest_grunt_run_grunt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_run_grunt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_run_grunt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-run-grunt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_run_grunt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_run_grunt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_run_grunt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_run_grunt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_run_grunt.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_run_grunt.__dirname +\n                    '/lib.npmtest_grunt_run_grunt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/node_modules/grunt-run-grunt/lib/lib.js":"\n\nfunction pluralise(count, str) {\n\treturn count + ' ' + str + (count === 1 ? '' : 's');\n}\n\nmodule.exports = {\n\tnub: '--> '.cyan,\n\tpluralise: pluralise,\n\tindentLog: '  |  '\n};","/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/node_modules/grunt-run-grunt/lib/parsers.js":"\r\n//TODO swap this for XRegExp\r\nvar startExp = /(?:\\r\\n|\\r|\\n){2}Available tasks(?:\\r\\n|\\r|\\n)/g;\r\nvar taskExp = /[ ]{2}[ ]*([\\w_-]+)[ ]{2}([ \\w_\"'-]+?)[ ]\\*[ ]*(?:\\r\\n|\\r|\\n)/g;\r\n\r\n// without delimiting first and last quote\r\nvar aliasRegExp = / +([\\w_:-]+)  Alias for \"([\\S \\t]+(?:\",\\s+\"[\\S \\t]+)*?)\"\\s+tasks?.+(?:\\r\\n|\\r|\\n)/g;\r\n\r\nfunction parseHelp(output) {\r\n\tvar result = {\r\n\t\ttask: {},\r\n\t\talias: {}\r\n\t};\r\n\r\n\tvar elementMatch;\r\n\tvar nextI = 0;\r\n\r\n\tstartExp.lastIndex = 0;\r\n\tvar startMatch = startExp.exec(output);\r\n\r\n\tif (startMatch) {\r\n\t\tnextI = startMatch.index + startMatch[0].length;\r\n\r\n\t\t// tasks\r\n\t\ttaskExp.lastIndex = nextI;\r\n\t\twhile ((elementMatch = taskExp.exec(output))) {\r\n\t\t\tnextI = elementMatch.index + elementMatch[0].length;\r\n\t\t\ttaskExp.lastIndex = nextI;\r\n\t\t\t//TODO add proper map object\r\n\t\t\tresult.task[elementMatch[1]] = String(elementMatch[2]);\r\n\t\t}\r\n\r\n\t\t// aliases\r\n\t\taliasRegExp.lastIndex = nextI;\r\n\t\twhile ((elementMatch = aliasRegExp.exec(output))) {\r\n\t\t\tnextI = elementMatch.index + elementMatch[0].length;\r\n\t\t\taliasRegExp.lastIndex = nextI;\r\n\t\t\t//TODO add proper map object\r\n\t\t\t// restore quotes and parse as JSON array\r\n\t\t\tresult.alias[elementMatch[1]] = JSON.parse('[\"' + elementMatch[2] + '\"]');\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nmodule.exports = {\r\n\tparseHelp: parseHelp\r\n};","/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/node_modules/grunt-run-grunt/tasks/run_grunt.js":"/*\r\n * grunt-run-grunt * https://github.com/Bartvds/grunt-run-grunt *\r\n * Copyright (c) 2013 Bart van der Schoor\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nvar lib = require('./../lib/lib');\r\nvar _ = require('lodash');\r\n\r\nvar runGruntfile = require('./../lib/runGruntfile').runGruntfile;\r\n\r\n// with flag type\r\nvar cliParams = {\r\n\thelp: 'flag',\r\n\tbase: 'string',\r\n\t'no-color': 'flag',\r\n\tdebug: 'flag',\r\n\tstack: 'flag',\r\n\tforce: 'flag',\r\n\ttasks: 'string',\r\n\tnpm: 'string',\r\n\t'no-write': 'flag',\r\n\tverbose: 'flag',\r\n\tversion: 'flag'\r\n};\r\n\r\n// with default values\r\nvar baseOptions = {\r\n\tcwd: null,\r\n\tlog: true,\r\n\tlogFile: null,\r\n\t//noAnsi: true,\r\n\tdebugCli: false,\r\n\twriteShell: null,\r\n\tindentLog: lib.indentLog,\r\n\tprocess: null,\r\n\tminimumFiles: 1,\r\n\tmaximumFiles: 10,\r\n\tconcurrent: require('os').cpus().length,\r\n\texpectFail: false,\r\n\tparser: null,\r\n\tenv: {},\r\n\tgruntOptions: {}\r\n};\r\n\r\nmodule.exports = function (grunt) {\r\n\r\n\t// experimental inversions\r\n\tvar warnReal = grunt.fail.warn;\r\n\tvar warnFake = function () {\r\n\t\targuments[0] = 'Warning '.cyan + arguments[0];\r\n\t\tgrunt.log.writeln.apply(null, arguments);\r\n\t};\r\n\r\n\t// main task\r\n\tgrunt.registerMultiTask('run_grunt', 'Run grunt-cli from within grunt.', function () {\r\n\r\n\t\tvar options = this.options(baseOptions);\r\n\t\toptions.concurrent = Math.max(1, options.concurrent);\r\n\r\n\t\tvar warnIsCalled = false;\r\n\t\tvar warnFail = warnReal;\r\n\r\n\t\tif (options.expectFail) {\r\n\t\t\twarnFail = function () {\r\n\t\t\t\twarnIsCalled = true;\r\n\t\t\t\targuments[0] = '<ignored> '.yellow + String(arguments[0]);\r\n\t\t\t\twarnFake.apply(null, arguments);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//var self = this;\r\n\t\tvar done = this.async();\r\n\t\tvar self = this;\r\n\t\tvar failed = [];\r\n\t\tvar passed = [];\r\n\t\tvar start = Date.now();\r\n\t\tvar counter = 0;\r\n\r\n\t\tvar files = [];\r\n\t\t_.forEach(this.filesSrc, function (filePath) {\r\n\t\t\tif (!grunt.file.exists(filePath)) {\r\n\t\t\t\tgrunt.log.writeln(lib.nub + 'not found \"' + filePath + '\"'.yellow);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfiles.push(filePath);\r\n\t\t});\r\n\r\n\t\tif (_.isNumber(options.minimumFiles) && options.minimumFiles > 0 && files.length < options.minimumFiles) {\r\n\t\t\tgrunt.fail.warn('expected at least ' + lib.pluralise(options.minimumFiles, 'gruntfile') + ' but ' + ('found only ' + files.length).red);\r\n\t\t\tdone();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (_.isNumber(options.maximumFiles) && options.maximumFiles > 0 && files.length > options.maximumFiles) {\r\n\t\t\tgrunt.fail.warn('expected at most ' + lib.pluralise(options.maximumFiles, 'gruntfile') + ' but ' + ('found ' + files.length).red);\r\n\t\t\tdone();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// loop gruntfiles\r\n\t\tgrunt.util.async.forEachLimit(files, options.concurrent, function (filePath, callback) {\r\n\t\t\tcounter++;\r\n\r\n\t\t\tvar runOptions = {\r\n\t\t\t\ttarget: self.target,\r\n\t\t\t\ttask: options.task,\r\n\t\t\t\targs: {}\r\n\t\t\t};\r\n\r\n\t\t\t// loop default keys but read from options\r\n\t\t\t_.each(baseOptions, function (value, key) {\r\n\t\t\t\trunOptions[key] = options[key];\r\n\t\t\t});\r\n\r\n\t\t\t// import grunt-cli params\r\n\t\t\t_.each(cliParams, function (value, key) {\r\n\t\t\t\tif (!_.isUndefined(options[key])) {\r\n\t\t\t\t\tif (cliParams[key] === 'flag') {\r\n\t\t\t\t\t\trunOptions.args[key] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\trunOptions.args[key] = options[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//import grunt options\r\n\t\t\t_.assign(runOptions.args, options.gruntOptions);\r\n\r\n\t\t\tgrunt.log.writeln(lib.nub + 'starting ' + ' \"' + filePath + '\"');\r\n\r\n\t\t\t// run it\r\n\t\t\trunGruntfile(grunt, filePath, options.task, runOptions, function (err, result) {\r\n\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\tcallback(err || new Error('no result for ' + filePath));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar end = ' \"' + filePath + '\" (' + (result.duration) + 'ms)';\r\n\t\t\t\t\tif (result.fail) {\r\n\t\t\t\t\t\tfailed.push(result);\r\n\t\t\t\t\t\tgrunt.log.writeln(lib.nub + 'failed' + end);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpassed.push(result);\r\n\t\t\t\t\t\tgrunt.log.writeln(lib.nub + 'finished ' + end);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(err, result);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}, function (err) {\r\n\t\t\tif (err) {\r\n\t\t\t\tconsole.dir(err);\r\n\t\t\t\tgrunt.fail.fatal(err);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// fancy report\r\n\t\t\t\tvar end = ' (' + (Date.now() - start) + 'ms)\\n';\r\n\r\n\t\t\t\t//var total = passed.length + failed.length;\r\n\r\n\t\t\t\tif (failed.length > 0) {\r\n\t\t\t\t\t_.each(failed, function (res) {\r\n\t\t\t\t\t\tgrunt.log.writeln('--> failed '.red + res.options.target + ' @ \"' + res.src + '\"');\r\n\t\t\t\t\t});\r\n\t\t\t\t\tgrunt.log.writeln('');\r\n\r\n\t\t\t\t\twarnFail((lib.pluralise(failed.length, 'gruntfile') + ' failed').red + ' and ' + ('completed ' + passed.length).green + end);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgrunt.log.writeln('');\r\n\t\t\t\t\tif (passed.length === 0) {\r\n\t\t\t\t\t\tgrunt.log.ok('completed ' + lib.pluralise(passed.length, 'gruntfile').yellow + '' + end);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrunt.log.ok('completed ' + lib.pluralise(passed.length, 'gruntfile').green + '' + end);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (options.expectFail) {\r\n\t\t\t\t\tif (warnIsCalled) {\r\n\t\t\t\t\t\tgrunt.log.ok('ignoring expected fail');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrunt.fail.warn('expected failure but got success');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdone();\r\n\t\t});\r\n\t});\r\n};","/home/travis/build/npmtest/node-npmtest-grunt-run-grunt/node_modules/grunt-run-grunt/lib/runGruntfile.js":"var path = require('path');\r\nvar conf = require('./lib');\r\nvar parsers = require('./parsers');\r\n\r\n// write shell scripts\r\nfunction writeShell(grunt, options, src, cwd, argArr) {\r\n\tvar dir = options.writeShell;\r\n\tif (grunt.file.isFile(options.writeShell)) {\r\n\t\tdir = path.dirname(options.writeShell);\r\n\t}\r\n\r\n\tvar gf = path.basename(src.toLowerCase(), path.extname(src));\r\n\tvar base = path.join(dir, options.target + '__' + gf);\r\n\r\n\t// beh\r\n\tvar shPath = base + '.sh';\r\n\tvar shContent = [\r\n\t\t'#!/bin/bash',\r\n\t\t'',\r\n\t\t'cd ' + path.resolve(cwd),\r\n\t\t'grunt ' + argArr.join(' '),\r\n\t\t''\r\n\t].join('\\n');\r\n\tgrunt.file.write(shPath, shContent);\r\n\r\n\t//TODO chmod the shell-script?\r\n\r\n\t// semi broken\r\n\tvar batPath = base + '.bat';\r\n\tvar batContent = [\r\n\t\t'set PWD=%~dp0',\r\n\t\t'cd ' + path.resolve(cwd),\r\n\t\t'grunt ' + argArr.join(' '),\r\n\t\t'cd \"%PWD%\"',\r\n\t\t''\r\n\t].join('\\r\\n');\r\n\r\n\tconsole.log('argArr: ' + argArr.join(' '));\r\n\tgrunt.file.write(batPath, batContent);\r\n}\r\n\r\nfunction runGruntfile(grunt, src, tasks, options, callback) {\r\n\r\n\t//var os = require('os');\r\n\t//var assert = require('assert');\r\n\tvar _ = grunt.util._;\r\n\r\n\tvar mixedStdIO = [];\r\n\tvar taskList = [];\r\n\r\n\tvar cwd = (_.isUndefined(options.cwd) || _.isNull(options.cwd) ? path.dirname(src) : options.cwd);\r\n\r\n\t//return value\r\n\tvar result = {\r\n\t\terror: null,\r\n\t\tres: null,\r\n\t\tcode: '',\r\n\r\n\t\tfail: false,\r\n\t\toutput: '',\r\n\r\n\t\tsrc: src,\r\n\t\tgruntfile: path.basename(src, path.extname(src)),\r\n\t\tcwd: '',\r\n\r\n\t\ttasks: taskList,\r\n\t\toptions: options,\r\n\r\n\t\t// timing\r\n\t\tstart: Date.now(),\r\n\t\tend: Date.now(),\r\n\t\tduration: 0,\r\n\r\n\t\t// parsed data\r\n\t\tparsed: {}\r\n\t};\r\n\r\n\tvar useArgs = options.args;\r\n\r\n\t// apply defaults\r\n\tvar argHash = _.defaults({\r\n\t\t'gruntfile': path.resolve(src)\r\n\t}, useArgs);\r\n\r\n\tif (tasks) {\r\n\t\tif (_.isArray(tasks)) {\r\n\t\t\t_.forEach(tasks, function (target) {\r\n\t\t\t\ttaskList.push(target);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttaskList.push(tasks);\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\t// do NOT force default\r\n\t\t// tasks = ['default'];\r\n\t}\r\n\r\n\t// serialise named args\r\n\tvar argArr = [];\r\n\t_.each(argHash, function (value, opt) {\r\n\t\tif (opt.length === 0) {\r\n\t\t\targArr.push(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\targArr.push((opt.length === 1 ? '-' : '--') + opt);\r\n\t\t\tif (value !== true && !(_.isNull(value) && _.isUndefined(value))) {\r\n\t\t\t\targArr.push(value);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// append task names\r\n\t_.each(taskList, function (task) {\r\n\t\targArr.push(task);\r\n\t});\r\n\r\n\t// for debugging print repeatable cli commands\r\n\tif (options.debugCli) {\r\n\t\tgrunt.log.writeln([\r\n\t\t\t'cd ' + path.resolve(cwd),\r\n\t\t\t'grunt ' + argArr.join(' '),\r\n\t\t\t'cd ' + process.cwd()\r\n\t\t].join('\\n'));\r\n\r\n\t\tgrunt.log.writeln('');\r\n\t}\r\n\r\n\t// experimental\r\n\tif (options.writeShell) {\r\n\t\twriteShell(grunt, options, src, cwd, argArr);\r\n\t}\r\n\r\n\t// spawn cli options\r\n\tvar param = {\r\n\t\tcmd: 'grunt',\r\n\t\targs: argArr,\r\n\t\topts: {\r\n\t\t\tcwd: cwd,\r\n\t\t\tenv: grunt.util._.extend({}, process.env, (options.env || {}))\r\n\t\t}\r\n\t};\r\n\r\n\t// make a child\r\n\tvar child = grunt.util.spawn(param,\r\n\t\tfunction (err, res, code) {\r\n\t\t\tgrunt.log.writeln(conf.nub + 'reporting' + ' \"' + src + '\"');\r\n\r\n\t\t\t// *everything*\r\n\t\t\tresult.error = err;\r\n\t\t\tresult.res = res;\r\n\t\t\tresult.code = code;\r\n\t\t\tresult.output = mixedStdIO.join('');\r\n\t\t\tresult.end = Date.now();\r\n\t\t\tresult.duration = (result.end - result.start);\r\n\r\n\t\t\t// basic check\r\n\t\t\tif (err || code !== 0) {\r\n\t\t\t\tresult.fail = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tresult.fail = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (options.parser) {\r\n\t\t\t\tif (parsers.hasOwnProperty(options.parser)) {\r\n\t\t\t\t\tvar parseOutput = parsers[options.parser];\r\n\r\n\t\t\t\t\tresult.parsed[options.parser] = parseOutput(result.output);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// process the result object\r\n\t\t\tif (options.process) {\r\n\t\t\t\tvar ret = options.process(result);\r\n\t\t\t\tif (_.isUndefined(ret)) {\r\n\t\t\t\t\t// no return value: leaves as-is\r\n\t\t\t\t}\r\n\t\t\t\telse if (ret === true) {\r\n\t\t\t\t\t// boolean true mean it passes\r\n\t\t\t\t\tresult.fail = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// anythings else mean fail\r\n\t\t\t\t\tresult.fail = true;\r\n\r\n\t\t\t\t\tvar label = 'grunt_cli(' + [tasks].join(' / ') + ')';\r\n\r\n\t\t\t\t\tgrunt.log.writeln(conf.nub + ('grunt process forced failure').yellow + ' for ' + label);\r\n\r\n\t\t\t\t\tif (ret !== false) {\r\n\t\t\t\t\t\t// only log if not a boolean\r\n\t\t\t\t\t\tgrunt.log.writeln(conf.nub + ret);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// log the log\r\n\t\t\tif (options.log && mixedStdIO.length > 0) {\r\n\r\n\t\t\t\tif (_.isString(options.indentLog) && options.indentLog !== '') {\r\n\t\t\t\t\t//TODO optimise this\r\n\t\t\t\t\tgrunt.log.writeln(options.indentLog + result.output.replace(/\\r\\n|\\r|\\n/g, '\\n' + options.indentLog));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgrunt.log.writeln(result.output);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// file the log\r\n\t\t\tif (options.logFile) {\r\n\t\t\t\tvar tmp = options.logFile;\r\n\t\t\t\tif (grunt.file.isDir(tmp)) {\r\n\t\t\t\t\ttmp = path.join(tmp, 'run-grunt-log.txt');\r\n\t\t\t\t}\r\n\t\t\t\tgrunt.log.writeln(conf.nub + 'saving data' + ' to \"' + tmp + '\"');\r\n\t\t\t\tgrunt.file.write(tmp, result.output);\r\n\t\t\t}\r\n\r\n\t\t\t// bye\r\n\t\t\tcallback(null, result);\r\n\t\t}\r\n\t);\r\n\r\n\t// mix output (this wise?)\r\n\tchild.stdout.on('data', function (data) {\r\n\t\tmixedStdIO.push(data);\r\n\t});\r\n\tchild.stderr.on('data', function (data) {\r\n\t\tmixedStdIO.push(data);\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n\trunGruntfile: runGruntfile\r\n};"}